package keepcalm.mods.bukkit;

import keepcalm.mods.bukkit.BukkitEventRouter;
import org.bukkit.*;
import org.bukkit.block.Block;
import org.bukkit.block.BlockFace;
import org.bukkit.block.BlockState;
import org.bukkit.command.CommandSender;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.entity.*;
import org.bukkit.event.Cancellable;
import org.bukkit.event.*;
import org.bukkit.event.block.*;
import org.bukkit.event.enchantment.*;
import org.bukkit.event.entity.*;
import org.bukkit.event.hanging.*;
import org.bukkit.event.inventory.*;
import org.bukkit.event.painting.*;
import org.bukkit.event.player.*;
import org.bukkit.event.server.*;
import org.bukkit.event.vehicle.*;
import org.bukkit.event.weather.*;
import org.bukkit.event.world.*;
import org.bukkit.inventory.*;
import org.bukkit.map.MapView;
import org.bukkit.plugin.Plugin;
import org.bukkit.plugin.RegisteredServiceProvider;
import org.bukkit.util.Vector;

import java.net.InetAddress;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class BukkitEventRouters {

    public static BlockCaller Block = new BlockCaller();
    public static EnchantmentCaller Enchantment = new EnchantmentCaller();
    public static EntityCaller Entity = new EntityCaller();
    public static HangingCaller Hanging = new HangingCaller();
    public static InventoryCaller Inventory = new InventoryCaller();
    public static PaintingCaller Painting = new PaintingCaller();
    public static PlayerCaller Player = new PlayerCaller();
    public static ServerCaller Server = new ServerCaller();
    public static VehicleCaller Vehicle = new VehicleCaller();
    public static WeatherCaller Weather = new WeatherCaller();
    public static WorldCaller World = new WorldCaller();

    public static class BlockCaller {
        public class BlockBreakCaller extends BukkitEventRouter<BlockBreakEvent> { public BlockBreakEvent callEvent(boolean initiallyDisabled, BlockBreakEvent event) { return callEvent(event, initiallyDisabled, null); }public BlockBreakEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<BlockBreakEvent> prep, org.bukkit.block.Block b, org.bukkit.entity.Player p) { BlockBreakEvent event = new BlockBreakEvent(b,p); return callEvent(event, initiallyDisabled, prep); } } public BlockBreakCaller BlockBreakCaller = new BlockBreakCaller();
        public class BlockBurnCaller extends BukkitEventRouter<BlockBurnEvent> { public BlockBurnEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<BlockBurnEvent> prep, org.bukkit.block.Block b) { BlockBurnEvent event = new BlockBurnEvent(b); return callEvent(event, initiallyDisabled, prep); } } public BlockBurnCaller BlockBurn = new BlockBurnCaller();
        public class BlockCanBuildCaller extends BukkitEventRouter<BlockCanBuildEvent> { public BlockCanBuildEvent callEvent(boolean initiallyDisabled, BlockCanBuildEvent event) { return callEvent(event, initiallyDisabled, null); }public BlockCanBuildEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<BlockCanBuildEvent> prep, org.bukkit.block.Block b, int material, boolean canBuild) { BlockCanBuildEvent event = new BlockCanBuildEvent(b,material,canBuild); return callEvent(event, initiallyDisabled, prep); } } public BlockCanBuildCaller BlockCanBuild = new BlockCanBuildCaller();
        public class BlockDamageCaller extends BukkitEventRouter<BlockDamageEvent> { public BlockDamageEvent callEvent(boolean initiallyDisabled, BlockDamageEvent event) { return callEvent(event, initiallyDisabled, null); }public BlockDamageEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<BlockDamageEvent> prep, org.bukkit.entity.Player player, org.bukkit.block.Block block, ItemStack itemInHand, final boolean instaBreak) { BlockDamageEvent event = new BlockDamageEvent(player,block,itemInHand,instaBreak); return callEvent(event, initiallyDisabled, prep); } } public BlockDamageCaller BlockDamage = new BlockDamageCaller();
        public class BlockDispenseCaller extends BukkitEventRouter<BlockDispenseEvent> { public BlockDispenseEvent callEvent(boolean initiallyDisabled, BlockDispenseEvent event) { return callEvent(event, initiallyDisabled, null); }public BlockDispenseEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<BlockDispenseEvent> prep, Block block, ItemStack dispensed, Vector velocity) { BlockDispenseEvent event = new BlockDispenseEvent(block,dispensed,velocity); return callEvent(event, initiallyDisabled, prep); } } public BlockDispenseCaller BlockDispense = new BlockDispenseCaller();
        public class BlockExpCaller extends BukkitEventRouter<BlockExpEvent> { public BlockExpEvent callEvent(boolean initiallyDisabled, BlockExpEvent event) { return callEvent(event, initiallyDisabled, null); }public BlockExpEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<BlockExpEvent> prep, org.bukkit.block.Block block, int exp) { BlockExpEvent event = new BlockExpEvent(block,exp); return callEvent(event, initiallyDisabled, prep); } } public BlockExpCaller BlockExp = new BlockExpCaller();
        public class BlockFadeCaller extends BukkitEventRouter<BlockFadeEvent> { public BlockFadeEvent callEvent(boolean initiallyDisabled, BlockFadeEvent event) { return callEvent(event, initiallyDisabled, null); }public BlockFadeEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<BlockFadeEvent> prep, org.bukkit.block.Block block, BlockState newState) { BlockFadeEvent event = new BlockFadeEvent(block,newState); return callEvent(event, initiallyDisabled, prep); } } public BlockFadeCaller BlockFade = new BlockFadeCaller();
        public class BlockFormCaller extends BukkitEventRouter<BlockFormEvent> { public BlockFormEvent callEvent(boolean initiallyDisabled, BlockFormEvent event) { return callEvent(event, initiallyDisabled, null); }public BlockFormEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<BlockFormEvent> prep, org.bukkit.block.Block block, BlockState newState) { BlockFormEvent event = new BlockFormEvent(block,newState); return callEvent(event, initiallyDisabled, prep); } } public BlockFormCaller BlockForm = new BlockFormCaller();
        public class BlockFromToCaller extends BukkitEventRouter<BlockFromToEvent> { public BlockFromToEvent callEvent(boolean initiallyDisabled, BlockFromToEvent event) { return callEvent(event, initiallyDisabled, null); }public BlockFromToEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<BlockFromToEvent> prep, org.bukkit.block.Block block, BlockFace face) { BlockFromToEvent event = new BlockFromToEvent(block,face); return callEvent(event, initiallyDisabled, prep); } } public BlockFromToCaller BlockFromTo = new BlockFromToCaller();
        public class BlockGrowCaller extends BukkitEventRouter<BlockGrowEvent> { public BlockGrowEvent callEvent(boolean initiallyDisabled, BlockGrowEvent event) { return callEvent(event, initiallyDisabled, null); }public BlockGrowEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<BlockGrowEvent> prep, org.bukkit.block.Block block, BlockState newState) { BlockGrowEvent event = new BlockGrowEvent(block, newState); return callEvent(event, initiallyDisabled, prep); } } public BlockGrowCaller BlockGrow = new BlockGrowCaller();
        public class BlockIgniteCaller extends BukkitEventRouter<BlockIgniteEvent> { public BlockIgniteEvent callEvent(boolean initiallyDisabled, BlockIgniteEvent event) { return callEvent(event, initiallyDisabled, null); }public BlockIgniteEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<BlockIgniteEvent> prep, org.bukkit.block.Block block, BlockIgniteEvent.IgniteCause cause, Player player) { BlockIgniteEvent event = new BlockIgniteEvent(block, cause, player); return callEvent(event, initiallyDisabled, prep); } } public BlockIgniteCaller BlockIgnite = new BlockIgniteCaller();
        public class BlockPhysicsCaller extends BukkitEventRouter<BlockPhysicsEvent> { public BlockPhysicsEvent callEvent(boolean initiallyDisabled, BlockPhysicsEvent event) { return callEvent(event, initiallyDisabled, null); }public BlockPhysicsEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<BlockPhysicsEvent> prep, org.bukkit.block.Block block, int changed) { BlockPhysicsEvent event = new BlockPhysicsEvent(block, changed); return callEvent(event, initiallyDisabled, prep); } } public BlockPhysicsCaller BlockPhysics = new BlockPhysicsCaller();
        public class BlockPistonExtendCaller extends BukkitEventRouter<BlockPistonExtendEvent> { public BlockPistonExtendEvent callEvent(boolean initiallyDisabled, BlockPistonExtendEvent event) { return callEvent(event, initiallyDisabled, null); }public BlockPistonExtendEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<BlockPistonExtendEvent> prep, org.bukkit.block.Block block, int length, BlockFace direction) { BlockPistonExtendEvent event = new BlockPistonExtendEvent(block, length, direction); return callEvent(event, initiallyDisabled, prep); } } public BlockPistonExtendCaller BlockPistonExtend = new BlockPistonExtendCaller();
        public class BlockPistonRetractCaller extends BukkitEventRouter<BlockPistonRetractEvent> { public BlockPistonRetractEvent callEvent(boolean initiallyDisabled, BlockPistonRetractEvent event) { return callEvent(event, initiallyDisabled, null); }public BlockPistonRetractEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<BlockPistonRetractEvent> prep, org.bukkit.block.Block block, BlockFace direction) { BlockPistonRetractEvent event = new BlockPistonRetractEvent(block, direction); return callEvent(event, initiallyDisabled, prep); } } public BlockPistonRetractCaller BlockPistonRetract = new BlockPistonRetractCaller();
        public class BlockPlaceCaller extends BukkitEventRouter<BlockPlaceEvent> { public BlockPlaceEvent callEvent(boolean initiallyDisabled, BlockPlaceEvent event) { return callEvent(event, initiallyDisabled, null); }public BlockPlaceEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<BlockPlaceEvent> prep, org.bukkit.block.Block placedBlock, BlockState replacedBlockState, org.bukkit.block.Block placedAgainst, ItemStack itemInHand, Player player, boolean canBuild) { BlockPlaceEvent event = new BlockPlaceEvent(placedBlock,replacedBlockState,placedAgainst,itemInHand,player,canBuild); return callEvent(event, initiallyDisabled, prep); } } public BlockPlaceCaller BlockPlace = new BlockPlaceCaller();
        public class BlockRedstoneCaller extends BukkitEventRouter<BlockRedstoneEvent> { public BlockRedstoneEvent callEvent(boolean initiallyDisabled, BlockRedstoneEvent event) { return callEvent(event, initiallyDisabled, null); }public BlockRedstoneEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<BlockRedstoneEvent> prep, org.bukkit.block.Block block, int oldCurrent, int newCurrent) { BlockRedstoneEvent event = new BlockRedstoneEvent(block,oldCurrent,newCurrent); return callEvent(event, initiallyDisabled, prep); } } public BlockRedstoneCaller BlockRedstone = new BlockRedstoneCaller();
        public class BlockSpreadCaller extends BukkitEventRouter<BlockSpreadEvent> { public BlockSpreadEvent callEvent(boolean initiallyDisabled, BlockSpreadEvent event) { return callEvent(event, initiallyDisabled, null); }public BlockSpreadEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<BlockSpreadEvent> prep, org.bukkit.block.Block block, org.bukkit.block.Block source, BlockState newState) { BlockSpreadEvent event = new BlockSpreadEvent(block,source,newState); return callEvent(event, initiallyDisabled, prep); } } public BlockSpreadCaller BlockSpread = new BlockSpreadCaller();
        public class EntityBlockFormCaller extends BukkitEventRouter<EntityBlockFormEvent> { public EntityBlockFormEvent callEvent(boolean initiallyDisabled, EntityBlockFormEvent event) { return callEvent(event, initiallyDisabled, null); }public EntityBlockFormEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<EntityBlockFormEvent> prep, org.bukkit.entity.Entity entity, org.bukkit.block.Block block, BlockState blockstate) { EntityBlockFormEvent event = new EntityBlockFormEvent(entity,block,blockstate); return callEvent(event, initiallyDisabled, prep); } } public EntityBlockFormCaller EntityBlockForm = new EntityBlockFormCaller();
        public class LeavesDecayCaller extends BukkitEventRouter<LeavesDecayEvent> { public LeavesDecayEvent callEvent(boolean initiallyDisabled, LeavesDecayEvent event) { return callEvent(event, initiallyDisabled, null); }public LeavesDecayEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<LeavesDecayEvent> prep, org.bukkit.block.Block block) { LeavesDecayEvent event = new LeavesDecayEvent(block); return callEvent(event, initiallyDisabled, prep); } } public LeavesDecayCaller LeavesDecay = new LeavesDecayCaller();
        public class NotePlayCaller extends BukkitEventRouter<NotePlayEvent> { public NotePlayEvent callEvent(boolean initiallyDisabled, NotePlayEvent event) { return callEvent(event, initiallyDisabled, null); }public NotePlayEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<NotePlayEvent> prep, org.bukkit.block.Block block, Instrument instrument, Note note) { NotePlayEvent event = new NotePlayEvent(block,instrument,note); return callEvent(event, initiallyDisabled, prep); } } public NotePlayCaller NotePlay = new NotePlayCaller();
        public class SignChangeCaller extends BukkitEventRouter<SignChangeEvent> { public SignChangeEvent callEvent(boolean initiallyDisabled, SignChangeEvent event) { return callEvent(event, initiallyDisabled, null); }public SignChangeEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<SignChangeEvent> prep, org.bukkit.block.Block block, Player player, String[] lines) { SignChangeEvent event = new SignChangeEvent(block,player,lines); return callEvent(event, initiallyDisabled, prep); } } public SignChangeCaller SignChange = new SignChangeCaller();
    }

    public static class EnchantmentCaller { }
        public class EnchantItemCaller extends BukkitEventRouter<EnchantItemEvent> { public EnchantItemEvent callEvent(boolean initiallyDisabled, EnchantItemEvent event) { return callEvent(event, initiallyDisabled, null); }public EnchantItemEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<EnchantItemEvent> prep, final Player enchanter, InventoryView view, Block table, ItemStack item, int level, Map<org.bukkit.enchantments.Enchantment, Integer> enchants, int button) { EnchantItemEvent event = new EnchantItemEvent(enchanter, view, table, item, level, enchants, button); return callEvent(event, initiallyDisabled, prep); } } public EnchantItemCaller EnchantItem = new EnchantItemCaller();
        public class PrepareItemEnchantCaller extends BukkitEventRouter<PrepareItemEnchantEvent> { public PrepareItemEnchantEvent callEvent(boolean initiallyDisabled, PrepareItemEnchantEvent event) { return callEvent(event, initiallyDisabled, null); }public PrepareItemEnchantEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<PrepareItemEnchantEvent> prep, Player enchanter, InventoryView view, Block table, ItemStack item, int[] levelsOffered, int bonus) { PrepareItemEnchantEvent event = new PrepareItemEnchantEvent(enchanter,view,table,item,levelsOffered,bonus); return callEvent(event, initiallyDisabled, prep); } } public PrepareItemEnchantCaller PrepareItemEnchant = new PrepareItemEnchantCaller();

    public static class EntityCaller {
        public class CreatureSpawnCaller extends BukkitEventRouter<CreatureSpawnEvent> { public CreatureSpawnEvent callEvent(boolean initiallyDisabled, CreatureSpawnEvent event) { return callEvent(event, initiallyDisabled, null); }public CreatureSpawnEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<CreatureSpawnEvent> prep, LivingEntity spawnee, CreatureSpawnEvent.SpawnReason spawnReason) { CreatureSpawnEvent event = new CreatureSpawnEvent(spawnee,spawnReason); return callEvent(event, initiallyDisabled, prep); } } public CreatureSpawnCaller CreatureSpawn = new CreatureSpawnCaller();
        public class CreeperPowerCaller extends BukkitEventRouter<CreeperPowerEvent> { public CreeperPowerEvent callEvent(boolean initiallyDisabled, CreeperPowerEvent event) { return callEvent(event, initiallyDisabled, null); }public CreeperPowerEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<CreeperPowerEvent> prep, Creeper creeper, CreeperPowerEvent.PowerCause cause) { CreeperPowerEvent event = new CreeperPowerEvent(creeper,cause); return callEvent(event, initiallyDisabled, prep); } } public CreeperPowerCaller CreeperPower = new CreeperPowerCaller();
        public class EntityBreakDoorCaller extends BukkitEventRouter<EntityBreakDoorEvent> { public EntityBreakDoorEvent callEvent(boolean initiallyDisabled, EntityBreakDoorEvent event) { return callEvent(event, initiallyDisabled, null); }public EntityBreakDoorEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<EntityBreakDoorEvent> prep, LivingEntity entity, org.bukkit.block.Block targetBlock) { EntityBreakDoorEvent event = new EntityBreakDoorEvent(entity,targetBlock); return callEvent(event, initiallyDisabled, prep); } } public EntityBreakDoorCaller EntityBreakDoor = new EntityBreakDoorCaller();
        public class EntityChangeBlockCaller extends BukkitEventRouter<EntityChangeBlockEvent> { public EntityChangeBlockEvent callEvent(boolean initiallyDisabled, EntityChangeBlockEvent event) { return callEvent(event, initiallyDisabled, null); }public EntityChangeBlockEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<EntityChangeBlockEvent> prep, Entity what, org.bukkit.block.Block block, Material to, byte data) { EntityChangeBlockEvent event = new EntityChangeBlockEvent(what,block,to,data); return callEvent(event, initiallyDisabled, prep); } } public EntityChangeBlockCaller EntityChangeBlock = new EntityChangeBlockCaller();
        public class EntityCombustByBlockCaller extends BukkitEventRouter<EntityCombustByBlockEvent> { public EntityCombustByBlockEvent callEvent(boolean initiallyDisabled, EntityCombustByBlockEvent event) { return callEvent(event, initiallyDisabled, null); }public EntityCombustByBlockEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<EntityCombustByBlockEvent> prep, Block combuster, Entity combustee, int duration) { EntityCombustByBlockEvent event = new EntityCombustByBlockEvent(combuster,combustee,duration); return callEvent(event, initiallyDisabled, prep); } } public EntityCombustByBlockCaller EntityCombustByBlock = new EntityCombustByBlockCaller();
        public class EntityCombustByEntityCaller extends BukkitEventRouter<EntityCombustByEntityEvent> { public EntityCombustByEntityEvent callEvent(boolean initiallyDisabled, EntityCombustByEntityEvent event) { return callEvent(event, initiallyDisabled, null); }public EntityCombustByEntityEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<EntityCombustByEntityEvent> prep, Entity combuster, Entity combustee, int duration) { EntityCombustByEntityEvent event = new EntityCombustByEntityEvent(combuster,combustee,duration); return callEvent(event, initiallyDisabled, prep); } } public EntityCombustByEntityCaller EntityCombustByEntity = new EntityCombustByEntityCaller();
        public class EntityCombustCaller extends BukkitEventRouter<EntityCombustEvent> { public EntityCombustEvent callEvent(boolean initiallyDisabled, EntityCombustEvent event) { return callEvent(event, initiallyDisabled, null); }public EntityCombustEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<EntityCombustEvent> prep, Entity combustee, int duration) { EntityCombustEvent event = new EntityCombustEvent(combustee,duration); return callEvent(event, initiallyDisabled, prep); } } public EntityCombustCaller EntityCombust = new EntityCombustCaller();
        public class EntityCreatePortalCaller extends BukkitEventRouter<EntityCreatePortalEvent> { public EntityCreatePortalEvent callEvent(boolean initiallyDisabled, EntityCreatePortalEvent event) { return callEvent(event, initiallyDisabled, null); }public EntityCreatePortalEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<EntityCreatePortalEvent> prep, LivingEntity what, List<BlockState> blocks, PortalType type) { EntityCreatePortalEvent event = new EntityCreatePortalEvent(what,blocks,type); return callEvent(event, initiallyDisabled, prep); } } public EntityCreatePortalCaller EntityCreatePortal = new EntityCreatePortalCaller();
        public class EntityDamageByBlockCaller extends BukkitEventRouter<EntityDamageByBlockEvent> { public EntityDamageByBlockEvent callEvent(boolean initiallyDisabled, EntityDamageByBlockEvent event) { return callEvent(event, initiallyDisabled, null); }public EntityDamageByBlockEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<EntityDamageByBlockEvent> prep, Block damager, Entity damagee, EntityDamageEvent.DamageCause cause, int damage) { EntityDamageByBlockEvent event = new EntityDamageByBlockEvent(damager,damagee,cause,damage); return callEvent(event, initiallyDisabled, prep); } } public EntityDamageByBlockCaller EntityDamageByBlock = new EntityDamageByBlockCaller();
        public class EntityDamageByEntityCaller extends BukkitEventRouter<EntityDamageByEntityEvent> { public EntityDamageByEntityEvent callEvent(boolean initiallyDisabled, EntityDamageByEntityEvent event) { return callEvent(event, initiallyDisabled, null); }public EntityDamageByEntityEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<EntityDamageByEntityEvent> prep, Entity damager, Entity damagee, EntityDamageEvent.DamageCause cause, int damage) { EntityDamageByEntityEvent event = new EntityDamageByEntityEvent(damager,damagee,cause,damage); return callEvent(event, initiallyDisabled, prep); } } public EntityDamageByEntityCaller EntityDamageByEntity = new EntityDamageByEntityCaller();
        public class EntityDamageCaller extends BukkitEventRouter<EntityDamageEvent> { public EntityDamageEvent callEvent(boolean initiallyDisabled, EntityDamageEvent event) { return callEvent(event, initiallyDisabled, null); }public EntityDamageEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<EntityDamageEvent> prep, Entity damagee, EntityDamageEvent.DamageCause cause, int damage) { EntityDamageEvent event = new EntityDamageEvent(damagee,cause,damage); return callEvent(event, initiallyDisabled, prep); } } public EntityDamageCaller EntityDamage = new EntityDamageCaller();
        public class EntityDeathCaller extends BukkitEventRouter<EntityDeathEvent> { public EntityDeathEvent callEvent(boolean initiallyDisabled, EntityDeathEvent event) { return callEvent(event, initiallyDisabled, null); }public EntityDeathEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<EntityDeathEvent> prep, LivingEntity what, List<ItemStack> drops, int droppedExp) { EntityDeathEvent event = new EntityDeathEvent(what,drops,droppedExp); return callEvent(event, initiallyDisabled, prep); } } public EntityDeathCaller EntityDeath = new EntityDeathCaller();
        public class EntityExplodeCaller extends BukkitEventRouter<EntityExplodeEvent> { public EntityExplodeEvent callEvent(boolean initiallyDisabled, EntityExplodeEvent event) { return callEvent(event, initiallyDisabled, null); }public EntityExplodeEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<EntityExplodeEvent> prep, Entity what, Location location, List<Block> blocks, float yield) { EntityExplodeEvent event = new EntityExplodeEvent(what,location,blocks,yield); return callEvent(event, initiallyDisabled, prep); } } public EntityExplodeCaller EntityExplode = new EntityExplodeCaller();
        public class EntityInteractCaller extends BukkitEventRouter<EntityInteractEvent> { public EntityInteractEvent callEvent(boolean initiallyDisabled, EntityInteractEvent event) { return callEvent(event, initiallyDisabled, null); }public EntityInteractEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<EntityInteractEvent> prep, Entity entity, org.bukkit.block.Block block) { EntityInteractEvent event = new EntityInteractEvent(entity,block); return callEvent(event, initiallyDisabled, prep); } } public EntityInteractCaller EntityInteract = new EntityInteractCaller();
        public class EntityPortalEnterCaller extends BukkitEventRouter<EntityPortalEnterEvent> { public EntityPortalEnterEvent callEvent(boolean initiallyDisabled, EntityPortalEnterEvent event) { return callEvent(event, initiallyDisabled, null); }public EntityPortalEnterEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<EntityPortalEnterEvent> prep, Entity entity, Location location) { EntityPortalEnterEvent event = new EntityPortalEnterEvent(entity,location); return callEvent(event, initiallyDisabled, prep); } } public EntityPortalEnterCaller EntityPortalEnter = new EntityPortalEnterCaller();
        public class EntityPortalCaller extends BukkitEventRouter<EntityPortalEvent> { public EntityPortalEvent callEvent(boolean initiallyDisabled, EntityPortalEvent event) { return callEvent(event, initiallyDisabled, null); }public EntityPortalEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<EntityPortalEvent> prep, Entity entity, Location from, Location to, TravelAgent pta) { EntityPortalEvent event = new EntityPortalEvent(entity,from,to,pta); return callEvent(event, initiallyDisabled, prep); } } public EntityPortalCaller EntityPortal = new EntityPortalCaller();
        public class EntityPortalExitCaller extends BukkitEventRouter<EntityPortalExitEvent> { public EntityPortalExitEvent callEvent(boolean initiallyDisabled, EntityPortalExitEvent event) { return callEvent(event, initiallyDisabled, null); }public EntityPortalExitEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<EntityPortalExitEvent> prep, Entity entity, Location from, Location to, Vector before, Vector after) { EntityPortalExitEvent event = new EntityPortalExitEvent(entity,from,to,before,after); return callEvent(event, initiallyDisabled, prep); } } public EntityPortalExitCaller EntityPortalExit = new EntityPortalExitCaller();
        public class EntityRegainHealthCaller extends BukkitEventRouter<EntityRegainHealthEvent> { public EntityRegainHealthEvent callEvent(boolean initiallyDisabled, EntityRegainHealthEvent event) { return callEvent(event, initiallyDisabled, null); }public EntityRegainHealthEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<EntityRegainHealthEvent> prep, Entity entity, int amount, EntityRegainHealthEvent.RegainReason regainReason) { EntityRegainHealthEvent event = new EntityRegainHealthEvent(entity,amount,regainReason); return callEvent(event, initiallyDisabled, prep); } } public EntityRegainHealthCaller EntityRegainHealth = new EntityRegainHealthCaller();
        public class EntityShootBowCaller extends BukkitEventRouter<EntityShootBowEvent> { public EntityShootBowEvent callEvent(boolean initiallyDisabled, EntityShootBowEvent event) { return callEvent(event, initiallyDisabled, null); }public EntityShootBowEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<EntityShootBowEvent> prep, LivingEntity shooter, ItemStack bow, Projectile projectile, float force) { EntityShootBowEvent event = new EntityShootBowEvent(shooter,bow,projectile,force); return callEvent(event, initiallyDisabled, prep); } } public EntityShootBowCaller EntityShootBow = new EntityShootBowCaller();
        public class EntityTameCaller extends BukkitEventRouter<EntityTameEvent> { public EntityTameEvent callEvent(boolean initiallyDisabled, EntityTameEvent event) { return callEvent(event, initiallyDisabled, null); }public EntityTameEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<EntityTameEvent> prep, LivingEntity entity, AnimalTamer owner) { EntityTameEvent event = new EntityTameEvent(entity,owner); return callEvent(event, initiallyDisabled, prep); } } public EntityTameCaller EntityTame = new EntityTameCaller();
        public class EntityTargetCaller extends BukkitEventRouter<EntityTargetEvent> { public EntityTargetEvent callEvent(boolean initiallyDisabled, EntityTargetEvent event) { return callEvent(event, initiallyDisabled, null); }public EntityTargetEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<EntityTargetEvent> prep, Entity entity, Entity target, EntityTargetEvent.TargetReason reason) { EntityTargetEvent event = new EntityTargetEvent(entity,target,reason); return callEvent(event, initiallyDisabled, prep); } } public EntityTargetCaller EntityTarget = new EntityTargetCaller();
        public class EntityTargetLivingEntityCaller extends BukkitEventRouter<EntityTargetLivingEntityEvent> { public EntityTargetLivingEntityEvent callEvent(boolean initiallyDisabled, EntityTargetLivingEntityEvent event) { return callEvent(event, initiallyDisabled, null); }public EntityTargetLivingEntityEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<EntityTargetLivingEntityEvent> prep, Entity entity, LivingEntity target, EntityTargetEvent.TargetReason reason) { EntityTargetLivingEntityEvent event = new EntityTargetLivingEntityEvent(entity,target,reason); return callEvent(event, initiallyDisabled, prep); } } public EntityTargetLivingEntityCaller EntityTargetLivingEntity = new EntityTargetLivingEntityCaller();
        public class EntityTeleportCaller extends BukkitEventRouter<EntityTeleportEvent> { public EntityTeleportEvent callEvent(boolean initiallyDisabled, EntityTeleportEvent event) { return callEvent(event, initiallyDisabled, null); }public EntityTeleportEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<EntityTeleportEvent> prep, Entity what, Location from, Location to) { EntityTeleportEvent event = new EntityTeleportEvent(what,from,to); return callEvent(event, initiallyDisabled, prep); } } public EntityTeleportCaller EntityTeleport = new EntityTeleportCaller();
        public class ExpBottleCaller extends BukkitEventRouter<ExpBottleEvent> { public ExpBottleEvent callEvent(boolean initiallyDisabled, ExpBottleEvent event) { return callEvent(event, initiallyDisabled, null); }public ExpBottleEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<ExpBottleEvent> prep, ThrownExpBottle bottle, int exp) { ExpBottleEvent event = new ExpBottleEvent(bottle,exp); return callEvent(event, initiallyDisabled, prep); } } public ExpBottleCaller ExpBottle = new ExpBottleCaller();
        public class ExplosionPrimeCaller extends BukkitEventRouter<ExplosionPrimeEvent> { public ExplosionPrimeEvent callEvent(boolean initiallyDisabled, ExplosionPrimeEvent event) { return callEvent(event, initiallyDisabled, null); }public ExplosionPrimeEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<ExplosionPrimeEvent> prep, Explosive explosive) { ExplosionPrimeEvent event = new ExplosionPrimeEvent(explosive); return callEvent(event, initiallyDisabled, prep); } } public ExplosionPrimeCaller ExplosionPrime = new ExplosionPrimeCaller();
        public class FoodLevelChangeCaller extends BukkitEventRouter<FoodLevelChangeEvent> { public FoodLevelChangeEvent callEvent(boolean initiallyDisabled, FoodLevelChangeEvent event) { return callEvent(event, initiallyDisabled, null); }public FoodLevelChangeEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<FoodLevelChangeEvent> prep, HumanEntity what, int level) { FoodLevelChangeEvent event = new FoodLevelChangeEvent(what,level); return callEvent(event, initiallyDisabled, prep); } } public FoodLevelChangeCaller FoodLevelChange = new FoodLevelChangeCaller();
        public class ItemDespawnCaller extends BukkitEventRouter<ItemDespawnEvent> { public ItemDespawnEvent callEvent(boolean initiallyDisabled, ItemDespawnEvent event) { return callEvent(event, initiallyDisabled, null); }public ItemDespawnEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<ItemDespawnEvent> prep, Item despawnee) { ItemDespawnEvent event = new ItemDespawnEvent(despawnee,despawnee.getLocation()); return callEvent(event, initiallyDisabled, prep); } } public ItemDespawnCaller ItemDespawn = new ItemDespawnCaller();
        public class ItemSpawnCaller extends BukkitEventRouter<ItemSpawnEvent> { public ItemSpawnEvent callEvent(boolean initiallyDisabled, ItemSpawnEvent event) { return callEvent(event, initiallyDisabled, null); }public ItemSpawnEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<ItemSpawnEvent> prep, Item spawnee) { ItemSpawnEvent event = new ItemSpawnEvent(spawnee,spawnee.getLocation()); return callEvent(event, initiallyDisabled, prep); } } public ItemSpawnCaller ItemSpawn = new ItemSpawnCaller();
        public class PigZapCaller extends BukkitEventRouter<PigZapEvent> { public PigZapEvent callEvent(boolean initiallyDisabled, PigZapEvent event) { return callEvent(event, initiallyDisabled, null); }public PigZapEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<PigZapEvent> prep, Pig pig, LightningStrike bolt, PigZombie pigzombie) { PigZapEvent event = new PigZapEvent(pig,bolt,pigzombie); return callEvent(event, initiallyDisabled, prep); } } public PigZapCaller PigZap = new PigZapCaller();
        public class PlayerDeathCaller extends BukkitEventRouter<PlayerDeathEvent> { public PlayerDeathEvent callEvent(boolean initiallyDisabled, PlayerDeathEvent event) { return callEvent(event, initiallyDisabled, null); }public PlayerDeathEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerDeathEvent> prep, Player player, List<ItemStack> drops, int droppedExp, int newExp, int newTotalExp, int newLevel, String deathMessage) { PlayerDeathEvent event = new PlayerDeathEvent(player,drops,droppedExp,newExp,newTotalExp,newLevel,deathMessage); return callEvent(event, initiallyDisabled, prep); } } public PlayerDeathCaller PlayerDeath = new PlayerDeathCaller();
        public class PotionSplashCaller extends BukkitEventRouter<PotionSplashEvent> { public PotionSplashEvent callEvent(boolean initiallyDisabled, PotionSplashEvent event) { return callEvent(event, initiallyDisabled, null); }public PotionSplashEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<PotionSplashEvent> prep, ThrownPotion potion, Map<LivingEntity, Double> affectedEntities) { PotionSplashEvent event = new PotionSplashEvent(potion, affectedEntities); return callEvent(event, initiallyDisabled, prep); } } public PotionSplashCaller PotionSplash = new PotionSplashCaller();
        public class ProjectileHitCaller extends BukkitEventRouter<ProjectileHitEvent> { public ProjectileHitEvent callEvent(boolean initiallyDisabled, ProjectileHitEvent event) { return callEvent(event, initiallyDisabled, null); }public ProjectileHitEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<ProjectileHitEvent> prep, Projectile projectile) { ProjectileHitEvent event = new ProjectileHitEvent(projectile); return callEvent(event, initiallyDisabled, prep); } } public ProjectileHitCaller ProjectileHit = new ProjectileHitCaller();
        public class ProjectileLaunchCaller extends BukkitEventRouter<ProjectileLaunchEvent> { public ProjectileLaunchEvent callEvent(boolean initiallyDisabled, ProjectileLaunchEvent event) { return callEvent(event, initiallyDisabled, null); }public ProjectileLaunchEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<ProjectileLaunchEvent> prep, Entity what) { ProjectileLaunchEvent event = new ProjectileLaunchEvent(what); return callEvent(event, initiallyDisabled, prep); } } public ProjectileLaunchCaller ProjectileLaunch = new ProjectileLaunchCaller();
        public class SheepDyeWoolCaller extends BukkitEventRouter<SheepDyeWoolEvent> { public SheepDyeWoolEvent callEvent(boolean initiallyDisabled, SheepDyeWoolEvent event) { return callEvent(event, initiallyDisabled, null); }public SheepDyeWoolEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<SheepDyeWoolEvent> prep, Sheep sheep, DyeColor color) { SheepDyeWoolEvent event = new SheepDyeWoolEvent(sheep,color); return callEvent(event, initiallyDisabled, prep); } } public SheepDyeWoolCaller SheepDyeWool = new SheepDyeWoolCaller();
        public class SheepRegrowWoolCaller extends BukkitEventRouter<SheepRegrowWoolEvent> { public SheepRegrowWoolEvent callEvent(boolean initiallyDisabled, SheepRegrowWoolEvent event) { return callEvent(event, initiallyDisabled, null); }public SheepRegrowWoolEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<SheepRegrowWoolEvent> prep, Sheep sheep) { SheepRegrowWoolEvent event = new SheepRegrowWoolEvent(sheep); return callEvent(event, initiallyDisabled, prep); } } public SheepRegrowWoolCaller SheepRegrowWool = new SheepRegrowWoolCaller();
        public class SlimeSplitCaller extends BukkitEventRouter<SlimeSplitEvent> { public SlimeSplitEvent callEvent(boolean initiallyDisabled, SlimeSplitEvent event) { return callEvent(event, initiallyDisabled, null); }public SlimeSplitEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<SlimeSplitEvent> prep, Slime slime, int count) { SlimeSplitEvent event = new SlimeSplitEvent(slime,count); return callEvent(event, initiallyDisabled, prep); } } public SlimeSplitCaller SlimeSplit = new SlimeSplitCaller();
    }

    public static class HangingCaller {
        public class HangingBreakByEntityCaller extends BukkitEventRouter<HangingBreakByEntityEvent> { public HangingBreakByEntityEvent callEvent(boolean initiallyDisabled, HangingBreakByEntityEvent event) { return callEvent(event, initiallyDisabled, null); }public HangingBreakByEntityEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<HangingBreakByEntityEvent> prep, Hanging hanging, Entity remover) { HangingBreakByEntityEvent event = new HangingBreakByEntityEvent(hanging,remover); return callEvent(event, initiallyDisabled, prep); } } public HangingBreakByEntityCaller HangingBreakByEntity = new HangingBreakByEntityCaller();
        public class HangingBreakCaller extends BukkitEventRouter<HangingBreakEvent> { public HangingBreakEvent callEvent(boolean initiallyDisabled, HangingBreakEvent event) { return callEvent(event, initiallyDisabled, null); }public HangingBreakEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<HangingBreakEvent> prep, Hanging hanging, HangingBreakEvent.RemoveCause cause) { HangingBreakEvent event = new HangingBreakEvent(hanging,cause); return callEvent(event, initiallyDisabled, prep); } } public HangingBreakCaller HangingBreak = new HangingBreakCaller();
        public class HangingPlaceCaller extends BukkitEventRouter<HangingPlaceEvent> { public HangingPlaceEvent callEvent(boolean initiallyDisabled, HangingPlaceEvent event) { return callEvent(event, initiallyDisabled, null); }public HangingPlaceEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<HangingPlaceEvent> prep, org.bukkit.entity.Hanging hanging, Player player, org.bukkit.block.Block block, org.bukkit.block.BlockFace blockFace) { HangingPlaceEvent event = new HangingPlaceEvent(hanging,player,block,blockFace); return callEvent(event, initiallyDisabled, prep); } } public HangingPlaceCaller HangingPlace = new HangingPlaceCaller();
    }

    public static class InventoryCaller {
        public class BrewCaller extends BukkitEventRouter<BrewEvent> { public BrewEvent callEvent(boolean initiallyDisabled, BrewEvent event) { return callEvent(event, initiallyDisabled, null); }public BrewEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<BrewEvent> prep, Block brewer, BrewerInventory contents) { BrewEvent event = new BrewEvent(brewer,contents); return callEvent(event, initiallyDisabled, prep); } } public BrewCaller Brew = new BrewCaller();
        public class CraftItemCaller extends BukkitEventRouter<CraftItemEvent> { public CraftItemEvent callEvent(boolean initiallyDisabled, CraftItemEvent event) { return callEvent(event, initiallyDisabled, null); }public CraftItemEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<CraftItemEvent> prep, Recipe recipe, InventoryView what, org.bukkit.event.inventory.InventoryType.SlotType type, int slot, boolean right, boolean shift) { CraftItemEvent event = new CraftItemEvent(recipe,what,type,slot,right,shift); return callEvent(event, initiallyDisabled, prep); } } public CraftItemCaller CraftItem = new CraftItemCaller();
        public class FurnaceBurnCaller extends BukkitEventRouter<FurnaceBurnEvent> { public FurnaceBurnEvent callEvent(boolean initiallyDisabled, FurnaceBurnEvent event) { return callEvent(event, initiallyDisabled, null); }public FurnaceBurnEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<FurnaceBurnEvent> prep, Block furnace, ItemStack fuel, int burnTime) { FurnaceBurnEvent event = new FurnaceBurnEvent(furnace,fuel,burnTime); return callEvent(event, initiallyDisabled, prep); } } public FurnaceBurnCaller FurnaceBurn = new FurnaceBurnCaller();
        public class FurnaceExtractCaller extends BukkitEventRouter<FurnaceExtractEvent> { public FurnaceExtractEvent callEvent(boolean initiallyDisabled, FurnaceExtractEvent event) { return callEvent(event, initiallyDisabled, null); }public FurnaceExtractEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<FurnaceExtractEvent> prep, Player player, org.bukkit.block.Block block, Material itemType, int itemAmount, int exp) { FurnaceExtractEvent event = new FurnaceExtractEvent(player,block,itemType,itemAmount,exp); return callEvent(event, initiallyDisabled, prep); } } public FurnaceExtractCaller FurnaceExtract = new FurnaceExtractCaller();
        public class FurnaceSmeltCaller extends BukkitEventRouter<FurnaceSmeltEvent> { public FurnaceSmeltEvent callEvent(boolean initiallyDisabled, FurnaceSmeltEvent event) { return callEvent(event, initiallyDisabled, null); }public FurnaceSmeltEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<FurnaceSmeltEvent> prep, Block furnace, ItemStack source, ItemStack result) { FurnaceSmeltEvent event = new FurnaceSmeltEvent(furnace,source,result); return callEvent(event, initiallyDisabled, prep); } } public FurnaceSmeltCaller FurnaceSmelt = new FurnaceSmeltCaller();
        public class InventoryClickCaller extends BukkitEventRouter<InventoryClickEvent> { public InventoryClickEvent callEvent(boolean initiallyDisabled, InventoryClickEvent event) { return callEvent(event, initiallyDisabled, null); }public InventoryClickEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<InventoryClickEvent> prep, InventoryView what, org.bukkit.event.inventory.InventoryType.SlotType type, int slot, boolean right, boolean shift) { InventoryClickEvent event = new InventoryClickEvent(what,type,slot,right,shift); return callEvent(event, initiallyDisabled, prep); } } public InventoryClickCaller InventoryClick = new InventoryClickCaller();
        public class InventoryCloseCaller extends BukkitEventRouter<InventoryCloseEvent> { public InventoryCloseEvent callEvent(boolean initiallyDisabled, InventoryCloseEvent event) { return callEvent(event, initiallyDisabled, null); }public InventoryCloseEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<InventoryCloseEvent> prep, InventoryView transaction) { InventoryCloseEvent event = new InventoryCloseEvent(transaction); return callEvent(event, initiallyDisabled, prep); } } public InventoryCloseCaller InventoryClose = new InventoryCloseCaller();
        public class InventoryOpenCaller extends BukkitEventRouter<InventoryOpenEvent> { public InventoryOpenEvent callEvent(boolean initiallyDisabled, InventoryOpenEvent event) { return callEvent(event, initiallyDisabled, null); }public InventoryOpenEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<InventoryOpenEvent> prep, InventoryView transaction) { InventoryOpenEvent event = new InventoryOpenEvent(transaction); return callEvent(event, initiallyDisabled, prep); } } public InventoryOpenCaller InventoryOpen = new InventoryOpenCaller();
        public class InventoryType { }
        public class PrepareItemCraftCaller extends BukkitEventRouter<PrepareItemCraftEvent> { public PrepareItemCraftEvent callEvent(boolean initiallyDisabled, PrepareItemCraftEvent event) { return callEvent(event, initiallyDisabled, null); }public PrepareItemCraftEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<PrepareItemCraftEvent> prep, CraftingInventory what, InventoryView view, boolean isRepair) { PrepareItemCraftEvent event = new PrepareItemCraftEvent(what,view,isRepair); return callEvent(event, initiallyDisabled, prep); } } public PrepareItemCraftCaller PrepareItemCraft = new PrepareItemCraftCaller();
    }

    public static class PaintingCaller {
        public class PaintingBreakByEntityCaller extends BukkitEventRouter<PaintingBreakByEntityEvent> { public PaintingBreakByEntityEvent callEvent(boolean initiallyDisabled, PaintingBreakByEntityEvent event) { return callEvent(event, initiallyDisabled, null); }public PaintingBreakByEntityEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<PaintingBreakByEntityEvent> prep, Painting painting, Entity remover) { PaintingBreakByEntityEvent event = new PaintingBreakByEntityEvent(painting,remover); return callEvent(event, initiallyDisabled, prep); } } public PaintingBreakByEntityCaller PaintingBreakByEntity = new PaintingBreakByEntityCaller();
        public class PaintingBreakCaller extends BukkitEventRouter<PaintingBreakEvent> { public PaintingBreakEvent callEvent(boolean initiallyDisabled, PaintingBreakEvent event) { return callEvent(event, initiallyDisabled, null); }public PaintingBreakEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<PaintingBreakEvent> prep, Painting painting, PaintingBreakEvent.RemoveCause cause) { PaintingBreakEvent event = new PaintingBreakEvent(painting,cause); return callEvent(event, initiallyDisabled, prep); } } public PaintingBreakCaller PaintingBreak = new PaintingBreakCaller();
        public class PaintingPlaceCaller extends BukkitEventRouter<PaintingPlaceEvent> { public PaintingPlaceEvent callEvent(boolean initiallyDisabled, PaintingPlaceEvent event) { return callEvent(event, initiallyDisabled, null); }public PaintingPlaceEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<PaintingPlaceEvent> prep, Painting painting, Player player, org.bukkit.block.Block block, org.bukkit.block.BlockFace blockFace) { PaintingPlaceEvent event = new PaintingPlaceEvent(painting,player,block,blockFace); return callEvent(event, initiallyDisabled, prep); } } public PaintingPlaceCaller PaintingPlace = new PaintingPlaceCaller();
    }

    public static class PlayerCaller {
        public class AsyncPlayerChatCaller extends BukkitEventRouter<AsyncPlayerChatEvent> { public AsyncPlayerChatEvent callEvent(boolean initiallyDisabled, AsyncPlayerChatEvent event) { return callEvent(event, initiallyDisabled, null); }public AsyncPlayerChatEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<AsyncPlayerChatEvent> prep, boolean async, Player who, String message, Set<Player> players) { AsyncPlayerChatEvent event = new AsyncPlayerChatEvent(async,who,message,players); return callEvent(event, initiallyDisabled, prep); } } public AsyncPlayerChatCaller AsyncPlayerChat = new AsyncPlayerChatCaller();
        public class AsyncPlayerPreLoginCaller extends BukkitEventRouter<AsyncPlayerPreLoginEvent> { public AsyncPlayerPreLoginEvent callEvent(boolean initiallyDisabled, AsyncPlayerPreLoginEvent event) { return callEvent(event, initiallyDisabled, null); }public AsyncPlayerPreLoginEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<AsyncPlayerPreLoginEvent> prep, String name, InetAddress ipAddress) { AsyncPlayerPreLoginEvent event = new AsyncPlayerPreLoginEvent(name,ipAddress); return callEvent(event, initiallyDisabled, prep); } } public AsyncPlayerPreLoginCaller AsyncPlayerPreLogin = new AsyncPlayerPreLoginCaller();
        public class PlayerAnimationCaller extends BukkitEventRouter<PlayerAnimationEvent> { public PlayerAnimationEvent callEvent(boolean initiallyDisabled, PlayerAnimationEvent event) { return callEvent(event, initiallyDisabled, null); }public PlayerAnimationEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerAnimationEvent> prep, Player player) { PlayerAnimationEvent event = new PlayerAnimationEvent(player); return callEvent(event, initiallyDisabled, prep); } } public PlayerAnimationCaller PlayerAnimation = new PlayerAnimationCaller();
        public class PlayerAnimationType { }
        public class PlayerBedEnterCaller extends BukkitEventRouter<PlayerBedEnterEvent> { public PlayerBedEnterEvent callEvent(boolean initiallyDisabled, PlayerBedEnterEvent event) { return callEvent(event, initiallyDisabled, null); }public PlayerBedEnterEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerBedEnterEvent> prep, Player who, org.bukkit.block.Block bed) { PlayerBedEnterEvent event = new PlayerBedEnterEvent(who,bed); return callEvent(event, initiallyDisabled, prep); } } public PlayerBedEnterCaller PlayerBedEnter = new PlayerBedEnterCaller();
        public class PlayerBedLeaveCaller extends BukkitEventRouter<PlayerBedLeaveEvent> { public PlayerBedLeaveEvent callEvent(boolean initiallyDisabled, PlayerBedLeaveEvent event) { return callEvent(event, initiallyDisabled, null); }public PlayerBedLeaveEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerBedLeaveEvent> prep, Player who, org.bukkit.block.Block bed) { PlayerBedLeaveEvent event = new PlayerBedLeaveEvent(who,bed); return callEvent(event, initiallyDisabled, prep); } } public PlayerBedLeaveCaller PlayerBedLeave = new PlayerBedLeaveCaller();
        public class PlayerBucketEmptyCaller extends BukkitEventRouter<PlayerBucketEmptyEvent> { public PlayerBucketEmptyEvent callEvent(boolean initiallyDisabled, PlayerBucketEmptyEvent event) { return callEvent(event, initiallyDisabled, null); }public PlayerBucketEmptyEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerBucketEmptyEvent> prep, Player who, org.bukkit.block.Block blockClicked, org.bukkit.block.BlockFace blockFace, Material bucket, ItemStack itemInHand) { PlayerBucketEmptyEvent event = new PlayerBucketEmptyEvent(who,blockClicked,blockFace,bucket,itemInHand); return callEvent(event, initiallyDisabled, prep); } } public PlayerBucketEmptyCaller PlayerBucketEmpty = new PlayerBucketEmptyCaller();
        public class PlayerBucketFillCaller extends BukkitEventRouter<PlayerBucketFillEvent> { public PlayerBucketFillEvent callEvent(boolean initiallyDisabled, PlayerBucketFillEvent event) { return callEvent(event, initiallyDisabled, null); }public PlayerBucketFillEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerBucketFillEvent> prep, Player who, org.bukkit.block.Block blockClicked, org.bukkit.block.BlockFace blockFace, Material bucket, ItemStack itemInHand) { PlayerBucketFillEvent event = new PlayerBucketFillEvent(who,blockClicked,blockFace,bucket,itemInHand); return callEvent(event, initiallyDisabled, prep); } } public PlayerBucketFillCaller PlayerBucketFill = new PlayerBucketFillCaller();
        public class PlayerChangedWorldCaller extends BukkitEventRouter<PlayerChangedWorldEvent> { public PlayerChangedWorldEvent callEvent(boolean initiallyDisabled, PlayerChangedWorldEvent event) { return callEvent(event, initiallyDisabled, null); }public PlayerChangedWorldEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerChangedWorldEvent> prep, Player player, org.bukkit.World from) { PlayerChangedWorldEvent event = new PlayerChangedWorldEvent(player,from); return callEvent(event, initiallyDisabled, prep); } } public PlayerChangedWorldCaller PlayerChangedWorld = new PlayerChangedWorldCaller();
        public class PlayerChatCaller extends BukkitEventRouter<PlayerChatEvent> { public PlayerChatEvent callEvent(boolean initiallyDisabled, PlayerChatEvent event) { return callEvent(event, initiallyDisabled, null); }public PlayerChatEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerChatEvent> prep, Player player, String message, String format, Set<Player> recipients) { PlayerChatEvent event = new PlayerChatEvent(player,message,format,recipients); return callEvent(event, initiallyDisabled, prep); } } public PlayerChatCaller PlayerChat = new PlayerChatCaller();
        public class PlayerChatTabCompleteCaller extends BukkitEventRouter<PlayerChatTabCompleteEvent> { public PlayerChatTabCompleteEvent callEvent(boolean initiallyDisabled, PlayerChatTabCompleteEvent event) { return callEvent(event, initiallyDisabled, null); }public PlayerChatTabCompleteEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerChatTabCompleteEvent> prep, Player who, String message, Collection<String> completions) { PlayerChatTabCompleteEvent event = new PlayerChatTabCompleteEvent(who,message,completions); return callEvent(event, initiallyDisabled, prep); } } public PlayerChatTabCompleteCaller PlayerChatTabComplete = new PlayerChatTabCompleteCaller();
        public class PlayerCommandPreprocessCaller extends BukkitEventRouter<PlayerCommandPreprocessEvent> { public PlayerCommandPreprocessEvent callEvent(boolean initiallyDisabled, PlayerCommandPreprocessEvent event) { return callEvent(event, initiallyDisabled, null); }public PlayerCommandPreprocessEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerCommandPreprocessEvent> prep, Player player, String message, Set<Player> recipients) { PlayerCommandPreprocessEvent event = new PlayerCommandPreprocessEvent(player,message,recipients); return callEvent(event, initiallyDisabled, prep); } public PlayerCommandPreprocessEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerCommandPreprocessEvent> prep, Player player, String message) { PlayerCommandPreprocessEvent event = new PlayerCommandPreprocessEvent(player,message); return callEvent(event, initiallyDisabled, prep); } }  public PlayerCommandPreprocessCaller PlayerCommandPreprocess = new PlayerCommandPreprocessCaller();
        public class PlayerDropItemCaller extends BukkitEventRouter<PlayerDropItemEvent> { public PlayerDropItemEvent callEvent(boolean initiallyDisabled, PlayerDropItemEvent event) { return callEvent(event, initiallyDisabled, null); }public PlayerDropItemEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerDropItemEvent> prep, Player player, Item drop) { PlayerDropItemEvent event = new PlayerDropItemEvent(player,drop); return callEvent(event, initiallyDisabled, prep); } } public PlayerDropItemCaller PlayerDropItem = new PlayerDropItemCaller();
        public class PlayerEggThrowCaller extends BukkitEventRouter<PlayerEggThrowEvent> { public PlayerEggThrowEvent callEvent(boolean initiallyDisabled, PlayerEggThrowEvent event) { return callEvent(event, initiallyDisabled, null); }public PlayerEggThrowEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerEggThrowEvent> prep, Player player, Egg egg, boolean hatching, byte numHatches, CreatureType hatchingType) { PlayerEggThrowEvent event = new PlayerEggThrowEvent(player,egg,hatching,numHatches,hatchingType); return callEvent(event, initiallyDisabled, prep); } } public PlayerEggThrowCaller PlayerEggThrow = new PlayerEggThrowCaller();
        public class PlayerExpChangeCaller extends BukkitEventRouter<PlayerExpChangeEvent> { public PlayerExpChangeEvent callEvent(boolean initiallyDisabled, PlayerExpChangeEvent event) { return callEvent(event, initiallyDisabled, null); }public PlayerExpChangeEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerExpChangeEvent> prep, Player player, int expAmount) { PlayerExpChangeEvent event = new PlayerExpChangeEvent(player,expAmount); return callEvent(event, initiallyDisabled, prep); } } public PlayerExpChangeCaller PlayerExpChange = new PlayerExpChangeCaller();
        public class PlayerFishCaller extends BukkitEventRouter<PlayerFishEvent> { public PlayerFishEvent callEvent(boolean initiallyDisabled, PlayerFishEvent event) { return callEvent(event, initiallyDisabled, null); }public PlayerFishEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerFishEvent> prep, Player player, Entity entity, PlayerFishEvent.State state) { PlayerFishEvent event = new PlayerFishEvent(player,entity,state); return callEvent(event, initiallyDisabled, prep); } } public PlayerFishCaller PlayerFish = new PlayerFishCaller();
        public class PlayerGameModeChangeCaller extends BukkitEventRouter<PlayerGameModeChangeEvent> { public PlayerGameModeChangeEvent callEvent(boolean initiallyDisabled, PlayerGameModeChangeEvent event) { return callEvent(event, initiallyDisabled, null); }public PlayerGameModeChangeEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerGameModeChangeEvent> prep, Player player, GameMode newGameMode) { PlayerGameModeChangeEvent event = new PlayerGameModeChangeEvent(player,newGameMode); return callEvent(event, initiallyDisabled, prep); } } public PlayerGameModeChangeCaller PlayerGameModeChange = new PlayerGameModeChangeCaller();
        public class PlayerInteractEntityCaller extends BukkitEventRouter<PlayerInteractEntityEvent> { public PlayerInteractEntityEvent callEvent(boolean initiallyDisabled, PlayerInteractEntityEvent event) { return callEvent(event, initiallyDisabled, null); }public PlayerInteractEntityEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerInteractEntityEvent> prep, Player who, Entity clickedEntity) { PlayerInteractEntityEvent event = new PlayerInteractEntityEvent(who,clickedEntity); return callEvent(event, initiallyDisabled, prep); } } public PlayerInteractEntityCaller PlayerInteractEntity = new PlayerInteractEntityCaller();
        public class PlayerInteractCaller extends BukkitEventRouter<PlayerInteractEvent> { public PlayerInteractEvent callEvent(boolean initiallyDisabled, PlayerInteractEvent event) { return callEvent(event, initiallyDisabled, null); }public PlayerInteractEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerInteractEvent> prep, Player who, Action action, ItemStack item, org.bukkit.block.Block clickedBlock, org.bukkit.block.BlockFace clickedFace) { PlayerInteractEvent event = new PlayerInteractEvent(who,action,item,clickedBlock,clickedFace); return callEvent(event, initiallyDisabled, prep); } } public PlayerInteractCaller PlayerInteract = new PlayerInteractCaller();
        public class PlayerInventoryCaller extends BukkitEventRouter<PlayerInventoryEvent> { public PlayerInventoryEvent callEvent(boolean initiallyDisabled, PlayerInventoryEvent event) { return callEvent(event, initiallyDisabled, null); }public PlayerInventoryEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerInventoryEvent> prep, Player player, Inventory inventory) { PlayerInventoryEvent event = new PlayerInventoryEvent(player,inventory); return callEvent(event, initiallyDisabled, prep); } } public PlayerInventoryCaller PlayerInventory = new PlayerInventoryCaller();
        public class PlayerItemBreakCaller extends BukkitEventRouter<PlayerItemBreakEvent> { public PlayerItemBreakEvent callEvent(boolean initiallyDisabled, PlayerItemBreakEvent event) { return callEvent(event, initiallyDisabled, null); }public PlayerItemBreakEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerItemBreakEvent> prep, Player player, ItemStack brokenItem) { PlayerItemBreakEvent event = new PlayerItemBreakEvent(player,brokenItem); return callEvent(event, initiallyDisabled, prep); } } public PlayerItemBreakCaller PlayerItemBreak = new PlayerItemBreakCaller();
        public class PlayerItemHeldCaller extends BukkitEventRouter<PlayerItemHeldEvent> { public PlayerItemHeldEvent callEvent(boolean initiallyDisabled, PlayerItemHeldEvent event) { return callEvent(event, initiallyDisabled, null); }public PlayerItemHeldEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerItemHeldEvent> prep, Player player, int previous, int current) { PlayerItemHeldEvent event = new PlayerItemHeldEvent(player,previous,current); return callEvent(event, initiallyDisabled, prep); } } public PlayerItemHeldCaller PlayerItemHeld = new PlayerItemHeldCaller();
        public class PlayerJoinCaller extends BukkitEventRouter<PlayerJoinEvent> { public PlayerJoinEvent callEvent(boolean initiallyDisabled, PlayerJoinEvent event) { return callEvent(event, initiallyDisabled, null); }public PlayerJoinEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerJoinEvent> prep, Player playerJoined, String joinMessage) { PlayerJoinEvent event = new PlayerJoinEvent(playerJoined,joinMessage); return callEvent(event, initiallyDisabled, prep); } } public PlayerJoinCaller PlayerJoin = new PlayerJoinCaller();
        public class PlayerKickCaller extends BukkitEventRouter<PlayerKickEvent> { public PlayerKickEvent callEvent(boolean initiallyDisabled, PlayerKickEvent event) { return callEvent(event, initiallyDisabled, null); }public PlayerKickEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerKickEvent> prep, Player playerKicked, String kickReason, String leaveMessage) { PlayerKickEvent event = new PlayerKickEvent(playerKicked,kickReason,leaveMessage); return callEvent(event, initiallyDisabled, prep); } } public PlayerKickCaller PlayerKick = new PlayerKickCaller();
        public class PlayerLevelChangeCaller extends BukkitEventRouter<PlayerLevelChangeEvent> { public PlayerLevelChangeEvent callEvent(boolean initiallyDisabled, PlayerLevelChangeEvent event) { return callEvent(event, initiallyDisabled, null); }public PlayerLevelChangeEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerLevelChangeEvent> prep, Player player, int oldLevel, int newLevel) { PlayerLevelChangeEvent event = new PlayerLevelChangeEvent(player,oldLevel,newLevel); return callEvent(event, initiallyDisabled, prep); } } public PlayerLevelChangeCaller PlayerLevelChange = new PlayerLevelChangeCaller();
        public class PlayerLoginCaller extends BukkitEventRouter<PlayerLoginEvent> { public PlayerLoginEvent callEvent(boolean initiallyDisabled, PlayerLoginEvent event) { return callEvent(event, initiallyDisabled, null); }public PlayerLoginEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerLoginEvent> prep, Player player, String hostname, InetAddress address, PlayerLoginEvent.Result result, String message) { PlayerLoginEvent event = new PlayerLoginEvent(player,hostname,address,result,message); return callEvent(event, initiallyDisabled, prep); } } public PlayerLoginCaller PlayerLogin = new PlayerLoginCaller();
        public class PlayerMoveCaller extends BukkitEventRouter<PlayerMoveEvent> { public PlayerMoveEvent callEvent(boolean initiallyDisabled, PlayerMoveEvent event) { return callEvent(event, initiallyDisabled, null); }public PlayerMoveEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerMoveEvent> prep, Player player, Location from, Location to) { PlayerMoveEvent event = new PlayerMoveEvent(player,from,to); return callEvent(event, initiallyDisabled, prep); } } public PlayerMoveCaller PlayerMove = new PlayerMoveCaller();
        public class PlayerPickupItemCaller extends BukkitEventRouter<PlayerPickupItemEvent> { public PlayerPickupItemEvent callEvent(boolean initiallyDisabled, PlayerPickupItemEvent event) { return callEvent(event, initiallyDisabled, null); }public PlayerPickupItemEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerPickupItemEvent> prep, Player player, Item item, int remaining) { PlayerPickupItemEvent event = new PlayerPickupItemEvent(player,item,remaining); return callEvent(event, initiallyDisabled, prep); } } public PlayerPickupItemCaller PlayerPickupItem = new PlayerPickupItemCaller();
        public class PlayerPortalCaller extends BukkitEventRouter<PlayerPortalEvent> { public PlayerPortalEvent callEvent(boolean initiallyDisabled, PlayerPortalEvent event) { return callEvent(event, initiallyDisabled, null); }public PlayerPortalEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerPortalEvent> prep, Player player, Location from, Location to, TravelAgent pta, PlayerTeleportEvent.TeleportCause cause) { PlayerPortalEvent event = new PlayerPortalEvent(player,from,to,pta,cause); return callEvent(event, initiallyDisabled, prep); } } public PlayerPortalCaller PlayerPortal = new PlayerPortalCaller();
        public class PlayerPreLoginCaller extends BukkitEventRouter<PlayerPreLoginEvent> { public PlayerPreLoginEvent callEvent(boolean initiallyDisabled, PlayerPreLoginEvent event) { return callEvent(event, initiallyDisabled, null); }public PlayerPreLoginEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerPreLoginEvent> prep, String name, InetAddress ipAddress) { PlayerPreLoginEvent event = new PlayerPreLoginEvent(name,ipAddress); return callEvent(event, initiallyDisabled, prep); } } public PlayerPreLoginCaller PlayerPreLogin = new PlayerPreLoginCaller();
        public class PlayerQuitCaller extends BukkitEventRouter<PlayerQuitEvent> { public PlayerQuitEvent callEvent(boolean initiallyDisabled, PlayerQuitEvent event) { return callEvent(event, initiallyDisabled, null); }public PlayerQuitEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerQuitEvent> prep, Player who, String quitMessage) { PlayerQuitEvent event = new PlayerQuitEvent(who,quitMessage); return callEvent(event, initiallyDisabled, prep); } } public PlayerQuitCaller PlayerQuit = new PlayerQuitCaller();
        public class PlayerRegisterChannelCaller extends BukkitEventRouter<PlayerRegisterChannelEvent> { public PlayerRegisterChannelEvent callEvent(boolean initiallyDisabled, PlayerRegisterChannelEvent event) { return callEvent(event, initiallyDisabled, null); }public PlayerRegisterChannelEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerRegisterChannelEvent> prep, Player player, String channel) { PlayerRegisterChannelEvent event = new PlayerRegisterChannelEvent(player,channel); return callEvent(event, initiallyDisabled, prep); } } public PlayerRegisterChannelCaller PlayerRegisterChannel = new PlayerRegisterChannelCaller();
        public class PlayerRespawnCaller extends BukkitEventRouter<PlayerRespawnEvent> { public PlayerRespawnEvent callEvent(boolean initiallyDisabled, PlayerRespawnEvent event) { return callEvent(event, initiallyDisabled, null); }public PlayerRespawnEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerRespawnEvent> prep, Player respawnPlayer, Location respawnLocation, boolean isBedSpawn) { PlayerRespawnEvent event = new PlayerRespawnEvent(respawnPlayer,respawnLocation,isBedSpawn); return callEvent(event, initiallyDisabled, prep); } } public PlayerRespawnCaller PlayerRespawn = new PlayerRespawnCaller();
        public class PlayerShearEntityCaller extends BukkitEventRouter<PlayerShearEntityEvent> { public PlayerShearEntityEvent callEvent(boolean initiallyDisabled, PlayerShearEntityEvent event) { return callEvent(event, initiallyDisabled, null); }public PlayerShearEntityEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerShearEntityEvent> prep, Player who, Entity what) { PlayerShearEntityEvent event = new PlayerShearEntityEvent(who,what); return callEvent(event, initiallyDisabled, prep); } } public PlayerShearEntityCaller PlayerShearEntity = new PlayerShearEntityCaller();
        public class PlayerTeleportCaller extends BukkitEventRouter<PlayerTeleportEvent> { public PlayerTeleportEvent callEvent(boolean initiallyDisabled, PlayerTeleportEvent event) { return callEvent(event, initiallyDisabled, null); }public PlayerTeleportEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerTeleportEvent> prep, Player player, Location from, Location to, PlayerTeleportEvent.TeleportCause cause) { PlayerTeleportEvent event = new PlayerTeleportEvent(player,from,to,cause); return callEvent(event, initiallyDisabled, prep); } } public PlayerTeleportCaller PlayerTeleport = new PlayerTeleportCaller();
        public class PlayerToggleFlightCaller extends BukkitEventRouter<PlayerToggleFlightEvent> { public PlayerToggleFlightEvent callEvent(boolean initiallyDisabled, PlayerToggleFlightEvent event) { return callEvent(event, initiallyDisabled, null); }public PlayerToggleFlightEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerToggleFlightEvent> prep, Player player, boolean isFlying) { PlayerToggleFlightEvent event = new PlayerToggleFlightEvent(player,isFlying); return callEvent(event, initiallyDisabled, prep); } } public PlayerToggleFlightCaller PlayerToggleFlight = new PlayerToggleFlightCaller();
        public class PlayerUnregisterChannelCaller extends BukkitEventRouter<PlayerUnregisterChannelEvent> { public PlayerUnregisterChannelEvent callEvent(boolean initiallyDisabled, PlayerUnregisterChannelEvent event) { return callEvent(event, initiallyDisabled, null); }public PlayerUnregisterChannelEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerUnregisterChannelEvent> prep, Player player, String channel) { PlayerUnregisterChannelEvent event = new PlayerUnregisterChannelEvent(player,channel); return callEvent(event, initiallyDisabled, prep); } } public PlayerUnregisterChannelCaller PlayerUnregisterChannel = new PlayerUnregisterChannelCaller();
        public class PlayerVelocityCaller extends BukkitEventRouter<PlayerVelocityEvent> { public PlayerVelocityEvent callEvent(boolean initiallyDisabled, PlayerVelocityEvent event) { return callEvent(event, initiallyDisabled, null); }public PlayerVelocityEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerVelocityEvent> prep, Player player, Vector velocity) { PlayerVelocityEvent event = new PlayerVelocityEvent(player,velocity); return callEvent(event, initiallyDisabled, prep); } } public PlayerVelocityCaller PlayerVelocity = new PlayerVelocityCaller();
    }

    public static class ServerCaller {
        public class MapInitializeCaller extends BukkitEventRouter<MapInitializeEvent> { public MapInitializeEvent callEvent(boolean initiallyDisabled, MapInitializeEvent event) { return callEvent(event, initiallyDisabled, null); }public MapInitializeEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<MapInitializeEvent> prep, MapView mapView) { MapInitializeEvent event = new MapInitializeEvent(mapView); return callEvent(event, initiallyDisabled, prep); } } public MapInitializeCaller MapInitialize = new MapInitializeCaller();
        public class PluginDisableCaller extends BukkitEventRouter<PluginDisableEvent> { public PluginDisableEvent callEvent(boolean initiallyDisabled, PluginDisableEvent event) { return callEvent(event, initiallyDisabled, null); }public PluginDisableEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<PluginDisableEvent> prep, Plugin plugin) { PluginDisableEvent event = new PluginDisableEvent(plugin); return callEvent(event, initiallyDisabled, prep); } } public PluginDisableCaller PluginDisable = new PluginDisableCaller();
        public class PluginEnableCaller extends BukkitEventRouter<PluginEnableEvent> { public PluginEnableEvent callEvent(boolean initiallyDisabled, PluginEnableEvent event) { return callEvent(event, initiallyDisabled, null); }public PluginEnableEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<PluginEnableEvent> prep, Plugin plugin) { PluginEnableEvent event = new PluginEnableEvent(plugin); return callEvent(event, initiallyDisabled, prep); } } public PluginEnableCaller PluginEnable = new PluginEnableCaller();
        public class RemoteServerCommandCaller extends BukkitEventRouter<RemoteServerCommandEvent> { public RemoteServerCommandEvent callEvent(boolean initiallyDisabled, RemoteServerCommandEvent event) { return callEvent(event, initiallyDisabled, null); }public RemoteServerCommandEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<RemoteServerCommandEvent> prep, CommandSender sender, String command) { RemoteServerCommandEvent event = new RemoteServerCommandEvent(sender,command); return callEvent(event, initiallyDisabled, prep); } } public RemoteServerCommandCaller RemoteServerCommand = new RemoteServerCommandCaller();
        public class ServerCommandCaller extends BukkitEventRouter<ServerCommandEvent> { public ServerCommandEvent callEvent(boolean initiallyDisabled, ServerCommandEvent event) { return callEvent(event, initiallyDisabled, null); }public ServerCommandEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<ServerCommandEvent> prep, CommandSender sender, String command) { ServerCommandEvent event = new ServerCommandEvent(sender,command); return callEvent(event, initiallyDisabled, prep); } } public ServerCommandCaller ServerCommand = new ServerCommandCaller();
        public class ServerListPingCaller extends BukkitEventRouter<ServerListPingEvent> { public ServerListPingEvent callEvent(boolean initiallyDisabled, ServerListPingEvent event) { return callEvent(event, initiallyDisabled, null); }public ServerListPingEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<ServerListPingEvent> prep, InetAddress address, String motd, int numPlayers, int maxPlayers) { ServerListPingEvent event = new ServerListPingEvent(address,motd,numPlayers,maxPlayers); return callEvent(event, initiallyDisabled, prep); } } public ServerListPingCaller ServerListPing = new ServerListPingCaller();
        public class ServiceRegisterCaller extends BukkitEventRouter<ServiceRegisterEvent> { public ServiceRegisterEvent callEvent(boolean initiallyDisabled, ServiceRegisterEvent event) { return callEvent(event, initiallyDisabled, null); }public ServiceRegisterEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<ServiceRegisterEvent> prep, RegisteredServiceProvider<?> registeredProvider) { ServiceRegisterEvent event = new ServiceRegisterEvent(registeredProvider); return callEvent(event, initiallyDisabled, prep); } } public ServiceRegisterCaller ServiceRegister = new ServiceRegisterCaller();
        public class ServiceUnregisterCaller extends BukkitEventRouter<ServiceUnregisterEvent> { public ServiceUnregisterEvent callEvent(boolean initiallyDisabled, ServiceUnregisterEvent event) { return callEvent(event, initiallyDisabled, null); }public ServiceUnregisterEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<ServiceUnregisterEvent> prep, RegisteredServiceProvider<?> serviceProvider) { ServiceUnregisterEvent event = new ServiceUnregisterEvent(serviceProvider); return callEvent(event, initiallyDisabled, prep); } } public ServiceUnregisterCaller ServiceUnregister = new ServiceUnregisterCaller();
    }

    public static class VehicleCaller {
        public class VehicleBlockCollisionCaller extends BukkitEventRouter<VehicleBlockCollisionEvent> { public VehicleBlockCollisionEvent callEvent(boolean initiallyDisabled, VehicleBlockCollisionEvent event) { return callEvent(event, initiallyDisabled, null); }public VehicleBlockCollisionEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<VehicleBlockCollisionEvent> prep, Vehicle vehicle, org.bukkit.block.Block block) { VehicleBlockCollisionEvent event = new VehicleBlockCollisionEvent(vehicle,block); return callEvent(event, initiallyDisabled, prep); } } public VehicleBlockCollisionCaller VehicleBlockCollision = new VehicleBlockCollisionCaller();
        public class VehicleCreateCaller extends BukkitEventRouter<VehicleCreateEvent> { public VehicleCreateEvent callEvent(boolean initiallyDisabled, VehicleCreateEvent event) { return callEvent(event, initiallyDisabled, null); }public VehicleCreateEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<VehicleCreateEvent> prep, Vehicle vehicle) { VehicleCreateEvent event = new VehicleCreateEvent(vehicle); return callEvent(event, initiallyDisabled, prep); } } public VehicleCreateCaller VehicleCreate = new VehicleCreateCaller();
        public class VehicleDamageCaller extends BukkitEventRouter<VehicleDamageEvent> { public VehicleDamageEvent callEvent(boolean initiallyDisabled, VehicleDamageEvent event) { return callEvent(event, initiallyDisabled, null); }public VehicleDamageEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<VehicleDamageEvent> prep, Vehicle vehicle, Entity attacker, int damage) { VehicleDamageEvent event = new VehicleDamageEvent(vehicle,attacker,damage); return callEvent(event, initiallyDisabled, prep); } } public VehicleDamageCaller VehicleDamage = new VehicleDamageCaller();
        public class VehicleDestroyCaller extends BukkitEventRouter<VehicleDestroyEvent> { public VehicleDestroyEvent callEvent(boolean initiallyDisabled, VehicleDestroyEvent event) { return callEvent(event, initiallyDisabled, null); }public VehicleDestroyEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<VehicleDestroyEvent> prep, Vehicle vehicle, Entity attacker) { VehicleDestroyEvent event = new VehicleDestroyEvent(vehicle,attacker); return callEvent(event, initiallyDisabled, prep); } } public VehicleDestroyCaller VehicleDestroy = new VehicleDestroyCaller();
        public class VehicleEnterCaller extends BukkitEventRouter<VehicleEnterEvent> { public VehicleEnterEvent callEvent(boolean initiallyDisabled, VehicleEnterEvent event) { return callEvent(event, initiallyDisabled, null); }public VehicleEnterEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<VehicleEnterEvent> prep, Vehicle vehicle, Entity entered) { VehicleEnterEvent event = new VehicleEnterEvent(vehicle,entered); return callEvent(event, initiallyDisabled, prep); } } public VehicleEnterCaller VehicleEnter = new VehicleEnterCaller();
        public class VehicleEntryCollisionCaller extends BukkitEventRouter<VehicleEntityCollisionEvent> { public VehicleEntityCollisionEvent callEvent(boolean initiallyDisabled, VehicleEntityCollisionEvent event) { return callEvent(event, initiallyDisabled, null); }public VehicleEntityCollisionEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<VehicleEntityCollisionEvent> prep, Vehicle vehicle, Entity entity) { VehicleEntityCollisionEvent event = new VehicleEntityCollisionEvent(vehicle,entity); return callEvent(event, initiallyDisabled, prep); } } public VehicleEntryCollisionCaller VehicleEntryCollision = new VehicleEntryCollisionCaller();
        public class VehicleExitCaller extends BukkitEventRouter<VehicleExitEvent> { public VehicleExitEvent callEvent(boolean initiallyDisabled, VehicleExitEvent event) { return callEvent(event, initiallyDisabled, null); }public VehicleExitEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<VehicleExitEvent> prep, Vehicle vehicle, LivingEntity exited) { VehicleExitEvent event = new VehicleExitEvent(vehicle,exited); return callEvent(event, initiallyDisabled, prep); } } public VehicleExitCaller VehicleExit = new VehicleExitCaller();
        public class VehicleMoveCaller extends BukkitEventRouter<VehicleMoveEvent> { public VehicleMoveEvent callEvent(boolean initiallyDisabled, VehicleMoveEvent event) { return callEvent(event, initiallyDisabled, null); }public VehicleMoveEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<VehicleMoveEvent> prep, Vehicle vehicle, Location from, Location to) { VehicleMoveEvent event = new VehicleMoveEvent(vehicle,from,to); return callEvent(event, initiallyDisabled, prep); } } public VehicleMoveCaller VehicleMove = new VehicleMoveCaller();
        public class VehicleUpdateCaller extends BukkitEventRouter<VehicleUpdateEvent> { public VehicleUpdateEvent callEvent(boolean initiallyDisabled, VehicleUpdateEvent event) { return callEvent(event, initiallyDisabled, null); }public VehicleUpdateEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<VehicleUpdateEvent> prep, Vehicle vehicle) { VehicleUpdateEvent event = new VehicleUpdateEvent(vehicle); return callEvent(event, initiallyDisabled, prep); } } public VehicleUpdateCaller VehicleUpdate = new VehicleUpdateCaller();
    }

    public static class WeatherCaller {
        public class LightningStrikeCaller extends BukkitEventRouter<LightningStrikeEvent> { public LightningStrikeEvent callEvent(boolean initiallyDisabled, LightningStrikeEvent event) { return callEvent(event, initiallyDisabled, null); }public LightningStrikeEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<LightningStrikeEvent> prep, World world, LightningStrike bolt) { LightningStrikeEvent event = new LightningStrikeEvent(world,bolt); return callEvent(event, initiallyDisabled, prep); } } public LightningStrikeCaller LightningStrike = new LightningStrikeCaller();
        public class ThunderChangeCaller extends BukkitEventRouter<ThunderChangeEvent> { public ThunderChangeEvent callEvent(boolean initiallyDisabled, ThunderChangeEvent event) { return callEvent(event, initiallyDisabled, null); }public ThunderChangeEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<ThunderChangeEvent> prep, World world, boolean to) { ThunderChangeEvent event = new ThunderChangeEvent(world,to); return callEvent(event, initiallyDisabled, prep); } } public ThunderChangeCaller ThunderChange = new ThunderChangeCaller();
        public class WeatherChangeCaller extends BukkitEventRouter<WeatherChangeEvent> { public WeatherChangeEvent callEvent(boolean initiallyDisabled, WeatherChangeEvent event) { return callEvent(event, initiallyDisabled, null); }public WeatherChangeEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<WeatherChangeEvent> prep, World world, boolean to) { WeatherChangeEvent event = new WeatherChangeEvent(world,to); return callEvent(event, initiallyDisabled, prep); } } public WeatherChangeCaller WeatherChange = new WeatherChangeCaller();
    }

    public static class WorldCaller {
        public class ChunkLoadCaller extends BukkitEventRouter<ChunkLoadEvent> { public ChunkLoadEvent callEvent(boolean initiallyDisabled, ChunkLoadEvent event) { return callEvent(event, initiallyDisabled, null); }public ChunkLoadEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<ChunkLoadEvent> prep, Chunk chunk, boolean newChunk) { ChunkLoadEvent event = new ChunkLoadEvent(chunk,newChunk); return callEvent(event, initiallyDisabled, prep); } } public ChunkLoadCaller ChunkLoad = new ChunkLoadCaller();
        public class ChunkPopulateCaller extends BukkitEventRouter<ChunkPopulateEvent> { public ChunkPopulateEvent callEvent(boolean initiallyDisabled, ChunkPopulateEvent event) { return callEvent(event, initiallyDisabled, null); }public ChunkPopulateEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<ChunkPopulateEvent> prep, Chunk chunk) { ChunkPopulateEvent event = new ChunkPopulateEvent(chunk); return callEvent(event, initiallyDisabled, prep); } } public ChunkPopulateCaller ChunkPopulate = new ChunkPopulateCaller();
        public class ChunkUnloadCaller extends BukkitEventRouter<ChunkUnloadEvent> { public ChunkUnloadEvent callEvent(boolean initiallyDisabled, ChunkUnloadEvent event) { return callEvent(event, initiallyDisabled, null); }public ChunkUnloadEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<ChunkUnloadEvent> prep, Chunk chunk) { ChunkUnloadEvent event = new ChunkUnloadEvent(chunk); return callEvent(event, initiallyDisabled, prep); } } public ChunkUnloadCaller ChunkUnload = new ChunkUnloadCaller();
        public class PortalCreateCaller extends BukkitEventRouter<PortalCreateEvent> { public PortalCreateEvent callEvent(boolean initiallyDisabled, PortalCreateEvent event) { return callEvent(event, initiallyDisabled, null); }public PortalCreateEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<PortalCreateEvent> prep, Collection<Block> blocks, World world, PortalCreateEvent.CreateReason reason) { PortalCreateEvent event = new PortalCreateEvent(blocks,world,reason); return callEvent(event, initiallyDisabled, prep); } } public PortalCreateCaller PortalCreate = new PortalCreateCaller();
        public class SpawnChangeCaller extends BukkitEventRouter<SpawnChangeEvent> { public SpawnChangeEvent callEvent(boolean initiallyDisabled, SpawnChangeEvent event) { return callEvent(event, initiallyDisabled, null); }public SpawnChangeEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<SpawnChangeEvent> prep, World world, Location previousLocation) { SpawnChangeEvent event = new SpawnChangeEvent(world,previousLocation); return callEvent(event, initiallyDisabled, prep); } } public SpawnChangeCaller SpawnChange = new SpawnChangeCaller();
        public class StructureGrowCaller extends BukkitEventRouter<StructureGrowEvent> { public StructureGrowEvent callEvent(boolean initiallyDisabled, StructureGrowEvent event) { return callEvent(event, initiallyDisabled, null); }public StructureGrowEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<StructureGrowEvent> prep, Location location, TreeType species, boolean bonemeal, Player player, List<BlockState> blocks) { StructureGrowEvent event = new StructureGrowEvent(location,species,bonemeal,player,blocks); return callEvent(event, initiallyDisabled, prep); } } public StructureGrowCaller StructureGrow = new StructureGrowCaller();
        public class WorldInitCaller extends BukkitEventRouter<WorldInitEvent> { public WorldInitEvent callEvent(boolean initiallyDisabled, WorldInitEvent event) { return callEvent(event, initiallyDisabled, null); }public WorldInitEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<WorldInitEvent> prep, World world) { WorldInitEvent event = new WorldInitEvent(world); return callEvent(event, initiallyDisabled, prep); } } public WorldInitCaller WorldInit = new WorldInitCaller();
        public class WorldLoadCaller extends BukkitEventRouter<WorldLoadEvent> { public WorldLoadEvent callEvent(boolean initiallyDisabled, WorldLoadEvent event) { return callEvent(event, initiallyDisabled, null); }public WorldLoadEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<WorldLoadEvent> prep, World world) { WorldLoadEvent event = new WorldLoadEvent(world); return callEvent(event, initiallyDisabled, prep); } } public WorldLoadCaller WorldLoad = new WorldLoadCaller();
        public class WorldSaveCaller extends BukkitEventRouter<WorldSaveEvent> { public WorldSaveEvent callEvent(boolean initiallyDisabled, WorldSaveEvent event) { return callEvent(event, initiallyDisabled, null); }public WorldSaveEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<WorldSaveEvent> prep, World world) { WorldSaveEvent event = new WorldSaveEvent(world); return callEvent(event, initiallyDisabled, prep); } } public WorldSaveCaller WorldSave = new WorldSaveCaller();
        public class WorldUnloadCaller extends BukkitEventRouter<WorldUnloadEvent> { public WorldUnloadEvent callEvent(boolean initiallyDisabled, WorldUnloadEvent event) { return callEvent(event, initiallyDisabled, null); }public WorldUnloadEvent callEvent(boolean initiallyDisabled, BukkitEventPrep<WorldUnloadEvent> prep, World world) { WorldUnloadEvent event = new WorldUnloadEvent(world); return callEvent(event, initiallyDisabled, prep); } } public WorldUnloadCaller WorldUnload = new WorldUnloadCaller();
    }
}
